<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();

_level = global.level;

if (_level == 1)
{
    audio_play_sound(snd_lvl1_1, 10, 1);
    _baseSpeed = 5;
}
else if (_level == 2)
{
    audio_play_sound(snd_lvl2_1, 10, 1);
    _baseSpeed = 7;
}

_instanceMap = ds_grid_create(3, 0);
ini_open(working_directory + "Map.ini");
ds_grid_read(_instanceMap, ini_read_string("Save", "THIS", ""));
ini_close();

_mapHeight = 500; //Height of the room map

_timeScale = 1;
_timeScaleTimer = 100;

_movementSpeed = _baseSpeed * _timeScale;

_radius = 1024;

_distance = 2 * 3.14 * _radius;

for(var i =0; i &lt; ds_grid_height(_instanceMap); i++)
{
    _xx = ds_grid_get(_instanceMap, 0, i);
    _yy = _mapHeight - ds_grid_get(_instanceMap, 1, i);
    _angle = - (_xx / _distance) * 360 + 90;
    
    spr = ds_grid_get(_instanceMap, 2, i);
    
    if (spr == spr_question)
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_question);
    }
    else if (spr == spr_questionRare)
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_questionRare);
    }
    else if (spr == spr_fireBall)
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_jumpPad);
    }
    else if (spr == spr_spikes_floor)
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_spikeFloor);
    }
    else if (spr == spr_spikes_ceil)
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_spikeCeil);
    }
    else
    {    
        inst = instance_create(room_width/2 + lengthdir_x(_radius + _yy, _angle), room_height/2 + lengthdir_y(1024 + _yy, _angle), obj_tile);
    }
    inst._yy = _yy;
    inst._angle = _angle;
    inst._xStart = inst.x;
    inst._yStart = inst.y;
    inst._baseAngle = _angle;
    inst.sprite_index = spr;
}

_angleSpeed = 360 / (_distance / _movementSpeed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///All question Map

//Very unoptimized temporary jam thing

//Create 2 maps
for(i = 0; i &lt; 2; i++)
{
    _questionMap[i] = ds_grid_create(3,23);
}
_availableQuestions = ds_list_create();
_collectedQuestions = ds_list_create();
_prevQuestions = ds_list_create();

file = file_text_open_read(working_directory + "QuestionData.txt");

var str = file_text_readln(file);
for(i = 0; i &lt; 2; i++)
{
    //Get password
    pos = string_pos("|",str);
    _password[i] = string_copy(str,0, pos - 1);

    //Replace
    str = string_replace(str,string_copy(str,0,pos), "");
}

num = 0;

while (!file_text_eof(file))
{
    str = file_text_readln(file);
    
    //Get question
    pos = string_pos("?",str);
    question = string_copy(str,0, pos);
    
    for(i = 0; i &lt; 2; i++)
    {
        ds_grid_add(_questionMap[i], 0, num, question);
    }
    ds_list_add(_availableQuestions, question); //Add to available list
    
    //Replace
    str = string_replace(str,string_copy(str,0,pos), "");
    
    //Get rarity
    pos = string_pos("|",str);
    rarity = string_copy(str,0, pos - 1);
    
    for(i = 0; i &lt; 2; i++)
    {
        ds_grid_add(_questionMap[i], 1, num, rarity);
    }
    
    //Replace
    str = string_replace(str,string_copy(str,0,pos), "");
    
    //Get answers
    for(i = 0; i &lt; 2; i++)
    {
        pos = string_pos("|",str);
        answer = string_copy(str,0, pos - 1);
        
        ds_grid_add(_questionMap[i], 2, num, answer);
        
        //Replace
        str = string_replace(str,string_copy(str,0,pos), "");
    }
    
    num++;
}
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Round end
if obj_surface.image_angle &gt; 360
{    
    _timeScale = 0;
    if (!instance_exists(obj_devil))
        instance_create(room_width/2 + 128, -16, obj_devil);
    
    obj_main._isStopped = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_movementSpeed = _baseSpeed * _timeScale;

if (keyboard_check_pressed(vk_escape))
    room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_control))
{
    screen_save("screen.png");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
//draw_text(view_xview + 16, view_yview + 16,string(ds_list_size(_availableQuestions)));

draw_set_color(c_dkgray);
draw_rectangle(room_width/2 - 256, 16, room_width/2 + 256, 24, 0);
draw_set_color(c_white);
draw_rectangle(room_width/2 - (_timeScaleTimer / 100) * 256, 16, room_width/2, 24, 0);
draw_rectangle(room_width/2 + (_timeScaleTimer / 100) * 256, 16, room_width/2, 24, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
